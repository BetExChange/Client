stages:
  - build
  - e2e

variables:
  DOCKER_DRIVER: overlay2
  VITE_FE_BASE_URL: http://frontend:5173

build-frontend:
  stage: build
  image: docker:24.0.2
  services:
    - docker:dind
  script:
    - docker build -t my-frontend:local ./bet-exchange

build-backend:
  stage: build
  image: docker:24.0.2
  services:
    - docker:dind
  script:
    - docker build -t my-backend:local ./Server

e2e-tests:
  stage: e2e
  image: docker:24.0.2

  # 1) Start Docker-in-Docker properly
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]

  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    BASE_URL: "http://frontend:5173"

  privileged: true

  before_script:
    - apk add --no-cache bash curl docker-compose

  script:
    # 2) Spin up your DB, backend, and frontend on test-net
    - docker-compose -f docker-compose.ci.yml up -d

    # 3) Wait until the frontend really responds
    - |
      for i in $(seq 1 15); do
        if curl -sSf $BASE_URL/login; then
          echo "✅ frontend is live"
          break
        fi
        echo "⏳ waiting for frontend… ($i/15)"
        sleep 2
      done

    # 4) Run Playwright in a one-off container on the same network
    - |
      docker run --rm \
        --network test-net \
        -v $CI_PROJECT_DIR/bet-exchange:/tests \
        -v $CI_PROJECT_DIR/playwright-report:/tests/playwright-report \
        -e BASE_URL=$BASE_URL \
        -w /tests \
        mcr.microsoft.com/playwright:v1.52.0-noble \
        bash -lc "\
          npm ci && \
          npx playwright install --with-deps && \
          npx playwright install msedge && \
          npx playwright test --config=playwright.config.ts \
        "

  needs:
    - build-frontend
    - build-backend
  artifacts:
    when: always
    paths:
      - playwright-report/
    expire_in: 1 day
  only:
    - merge_requests
    - main